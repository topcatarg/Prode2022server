@using Prode2022Server.Models.UserData
@using Prode2022Server.Services
@using Prode2022Server.Security
@inject UserDataServices userDataServices
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<EditForm Model="@userPassword" OnValidSubmit="PasswordValid">
    <DataAnnotationsValidator />
    <MudPaper class="d-flex flex-row align-content-start mt-2">
        <MudContainer class="d-flex flex-column">
            <MudTextField @bind-Value="userPassword.Password" Label="Contraseña" Variant="Variant.Text"
                InputType="InputType.Password" For="@(() => userPassword.Password)" />
            <MudTextField @bind-Value="userPassword.RepeatPassword" Label="Repetir Contraseña" Variant="Variant.Text"
                InputType="InputType.Password" For="@(() => userPassword.RepeatPassword)" />
        </MudContainer>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
            Disabled="@PasswordButtonDisabled" Class="ma-2">
            @if (PasswordButtonDisabled)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Procesando</MudText>
            }
            else
            {
                <MudText>Guardar</MudText>
            }
        </MudButton>
    </MudPaper>
</EditForm>

@code
{
    [Parameter]
    public UserLoginData userData { get; set; } = new();
    private UserPassword userPassword { get; set; } = new();
    private bool PasswordButtonDisabled = false;

    protected override Task OnParametersSetAsync()
    {
        userPassword.Id = userData.Id;
        return base.OnParametersSetAsync();
    }

    private async Task PasswordValid()
    {
        PasswordButtonDisabled = true;
        await InvokeAsync(StateHasChanged);
        bool result = await userDataServices.ChangeUserPasswordAsync(userPassword);
        if (result)
        {
            Snackbar.Add("Se actualizo el password. Se cerrara la sesion",Severity.Success);
            await ((CustomAuthProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
            NavigationManager.NavigateTo("",true);
        }
        else
        {
            Snackbar.Add("Hubo un problema al actualizar el password", Severity.Error);
        }
        PasswordButtonDisabled = false;
        await InvokeAsync(StateHasChanged);
    }
}