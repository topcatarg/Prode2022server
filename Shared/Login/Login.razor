@using Models
@using Prode2022Server.Security
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider


<EditForm Model="@userLogin" OnValidSubmit="DataValidated">
    <DataAnnotationsValidator />
    <MudPaper>
        <MudStack>
            <MudTextField 
                @bind-Value="userLogin.Email" 
                Label="E-mail" 
                Variant="Variant.Text" 
                InputType="InputType.Email"
                For="@(() => userLogin.Email)"/>
            <MudTextField 
                @bind-Value="userLogin.Password" 
                Label="Password" 
                Variant="Variant.Text" 
                InputType="@PasswordInput" 
                Adornment="Adornment.End" 
                AdornmentIcon="@PasswordInputIcon" 
                OnAdornmentClick="ButtonTestclick" 
                AdornmentAriaLabel="Show Password"
                For="@(() => userLogin.Password)" />
            <MudButton 
            ButtonType="ButtonType.Submit"
            Variant="Variant.Filled" 
            Color="Color.Primary" 
            Disabled="@ButtonDisabled" 
            Class="ma-2">
            @if (ButtonDisabled)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Procesando</MudText>
            }
            else
            {
                <MudText>Ingresar</MudText>
            }   
        </MudButton>
        </MudStack>
    </MudPaper>
</EditForm>

@code
{
    UserLogin userLogin = new();
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    InputType PasswordInput = InputType.Password;
    bool isShow;
    bool ButtonDisabled = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    public async Task TryLogin()
    {
        ButtonDisabled = true;
        //Call the login method
        var response = await HttpClient.PostAsJsonAsync<UserLogin>(NavigationManager.BaseUri + "Security/LoginUser",userLogin);
        if (!response.IsSuccessStatusCode)
        {
            
            Snackbar.Add("Error al hacer la llamada",Severity.Error);
        }
        else
        {
            var result = await response.Content.ReadFromJsonAsync<UserLogin>();
            if (result == null || !result.LoggedIn)
            {
                Snackbar.Add("pass mala",Severity.Info);
            }
            else
            {
                //login user
                await ((CustomAuthProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(result);
            }
            
            
        }
        ButtonDisabled = false;
        //redirect to main page
        NavigationManager.NavigateTo("\\", true);
    }
    public async Task DataValidated()
    {
        await TryLogin();
    }
}