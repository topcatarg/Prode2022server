@page "/AdminSite"
@using Prode2022Server.Services
@using Prode2022Server.Models.AdminSite
@inject AdminSiteServices adminSiteServices
@inject ISnackbar Snackbar

@attribute [Authorize(Policy = "ProfileIsAdmin")]

<MudContainer>
    @if (Working)
    {
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        <MudProgressLinear Color="Color.Primary" 
                Value="@MatchProgress" 
                Class="my-7" 
                Min=0
                Max=QuantityOfMatchs/>
    }
    else
    {
        <MudPaper class="ma-2">
            Hora del servidor: @CurrentTime
        </MudPaper>
        <MudPaper class="ma-2">
            <MudText>Modificar la diferencia horaria</MudText>
            <MudNumericField Max=12 Min=-12 
                Value=int.Parse(TimeDifference.Data) 
                T=int 
                ValueChanged=TimeDifferenceChanged/>
        </MudPaper>
        <MudPaper class="ma-2">
            <MudButton OnClick=CalculateMatchs>Calcular partidos</MudButton>
        </MudPaper>
        <MudPaper>
            <MudButton>Cerrar torneos</MudButton>
            <MudButton OnClick="CleanRefreshTokens">Limpiar tokens vencidos</MudButton>
            <MudButton>Blaquear password</MudButton>
            <MudButton>Diferencia horaria</MudButton>
        </MudPaper>
    }
</MudContainer>

@code 
{
    private bool Working = false;
    private DateTime CurrentTime = DateTime.Now;
    private SiteData TimeDifference = new();
    private Timer? StoreTimeDifferenceTimer = null;
    private int MatchProgress=0;
    private int QuantityOfMatchs=0;
    protected override async Task OnInitializedAsync()
    {
        TimeDifference = await adminSiteServices.GetAdminSiteData(SiteDataEnum.TimeDifference);
        adminSiteServices.NotifyProgress += OnProgress;
    }

    private async Task CalculateMatchs()
    {
        await WorkingState(true);
        QuantityOfMatchs = 90;
        await adminSiteServices.CalculateMatchs();
        Snackbar.Add($"Se calcularon todos los partidos",Severity.Success);
        MatchProgress = 0;
        await WorkingState(false);
    }

    private async Task OnProgress()
    {
        MatchProgress = adminSiteServices.CalculateState;
        await WorkingState(true);
    }
    private async Task CleanRefreshTokens()
    {
        await WorkingState(true);
        await adminSiteServices.CleanRefreshTokensAsync();
        await WorkingState(false);
    }

    private async Task WorkingState(bool State)
    {
        Working = State;
        await InvokeAsync(StateHasChanged);
    }

    private void TimeDifferenceChanged(int value)
    {
        TimeDifference.Data = value.ToString();
        if (StoreTimeDifferenceTimer == null)
        {
            StoreTimeDifferenceTimer = new(TimerDifferenceClick, null, 1000, Timeout.Infinite);
        }
        else
        {
            StoreTimeDifferenceTimer.Change(1000,Timeout.Infinite);
        }
    }

    private async void TimerDifferenceClick(Object? state)
    {
        var result = await adminSiteServices.StoreTimeDifferenceAsync(int.Parse(TimeDifference.Data));
        if (result)
        {
            Snackbar.Add($"Se modifico el tiempo a {TimeDifference.Data}",Severity.Success);
        }
        else
        {
            Snackbar.Add("Ocurrio un error",Severity.Error);
        }
        StoreTimeDifferenceTimer!.Dispose();
        StoreTimeDifferenceTimer = null;
    }
    
}