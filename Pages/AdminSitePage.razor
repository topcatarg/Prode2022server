@page "/AdminSite"
@using Prode2022Server.Services
@inject AdminSiteServices adminSiteServices

@attribute [Authorize(Policy = "ProfileIsAdmin")]

<MudContainer>
    @if (Working)
    {
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        <MudPaper class="ma-2">
            Hora del servidor: @CurrentTime
        </MudPaper>
        <MudPaper class="ma-2">
            <MudText>Modificar la diferencia horaria</MudText>
            <MudNumericField 
                T=int 
                Max=12 
                Min=-12 
                Value=TimeDifference 
                ValueChanged=TimeDifferenceChange />
        </MudPaper>
        <MudPaper>
            <MudButton>Cerrar torneos</MudButton>
            <MudButton>Calcular partidos</MudButton>
            <MudButton OnClick="CleanRefreshTokens">Limpiar tokens vencidos</MudButton>
            <MudButton>Blaquear password</MudButton>
            <MudButton>Diferencia horaria</MudButton>
        </MudPaper>
    }
</MudContainer>

@code 
{
    private bool Working = false;
    private DateTime CurrentTime = DateTime.Now;
    private int TimeDifference = 0;
    private Timer? StoreTimeDifferenceTimer = null;


    protected override async Task OnInitializedAsync()
    {

    }

    private async Task TimeDifferenceChange(int Value)
    {
        if (StoreTimeDifferenceTimer == null)
        {
            StoreTimeDifferenceTimer = new(TimerDifferenceClick, null, 1000, Timeout.Infinite);
        }
        else
        {

        }

    }

    private void TimerDifferenceClick(Object? state)
    {

    }

    private async Task CleanRefreshTokens()
    {
        await WorkingState(true);
        await adminSiteServices.CleanRefreshTokensAsync();
        await WorkingState(false);
    }

    private async Task WorkingState(bool State)
    {
        Working = State;
        await InvokeAsync(StateHasChanged);
    }
}